#pragma once
#include <utility>
#include <vector>
#include "../../Field/Field.h"
template <int amount>
class KeysSpawnRule
{
	std::vector<std::vector<char>> keys {
		{'-','-','-','-','-','-','-','X','-','-','-','-','-','-','-'},
		{'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
		{'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
		{'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
		{'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
		{'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
		{'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
		{'-','-','-','-','-','-','-','X','-','-','-','-','-','-','-'},
		{'X','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
		{'-','-','-','-','-','-','-','-','-','X','-','-','-','-','X'},
		{'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
		{'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
		{'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
		{'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
		{'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
	};
public:
	void establish(Field*);
};

template <int amount>
void KeysSpawnRule<amount>::establish(Field* field)
{
	field->setKeysAmount(amount);
	
	for (int i = 0; i < field->getSize(); i++) {
		for (int j = 0; j < field->getSize(); j++)
			if (keys[j][i] == 'X') {
				delete(field->getMatrix()->at(j).at(i));
				field->getMatrix()->at(j).at(i) = new Cell(CHEST);
			}
				
	}
}
